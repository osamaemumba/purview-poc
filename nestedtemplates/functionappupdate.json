{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "aadAppClientId": {
        "type": "string",
        "metadata": {
          "description": "The client Id of azure active directory app/service principal"
        }
      },
      "storageAccountName": {
        "type": "string"
      },
      "keyVaultName": {
        "type": "string"
      },
      "purviewAccountName": {
        "type": "string"
      }
    },
      "variables": {
        "functionAppName": "[concat('funcapp', uniqueString(resourceGroup().id))]",
        "functionName1": "configurePurview",
        "functionName2": "deletePurview",
        "tenantId": "[subscription().tenantId]"
      },
  "resources": [ 
    {
      "type": "Microsoft.Web/sites/functions",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('functionAppName'), variables('functionName1'))]",
      "properties": {
        "config": {
            "bindings": [
                {
                  "authLevel": "function",
                  "type": "httpTrigger",
                  "direction": "in",
                  "name": "req",
                  "methods": [
                    "get",
                    "post"
                  ]
                },
                {
                  "type": "http",
                  "direction": "out",
                  "name": "res"
                }
              ]
        },
        "files": {
          "index.js": "[concat('var axios = require(\"axios\");\nvar qs = require(\"qs\");\n\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SecretClient } = require(\"@azure/keyvault-secrets\");\n\n\nfunction azuread_auth(tenant_id, client_id, client_secret, resource_url) {\n    var data = qs.stringify({\n        \"grant_type\": \"client_credentials\",\n        \"client_id\": `${client_id}`,\n        \"client_secret\": `${client_secret}`,\n        \"resource\": `${resource_url}` \n    });\n\n    var config = {\n    headers: { \n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n    };\n\n    return axios.post(`https://login.microsoftonline.com/${tenant_id}/oauth2/token`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction create_data_source(access_token, Endpoint, kind, baseUrl, dataSourceName, api_version=\"2018-12-01-preview\") {\n    var data = {\n        \"kind\": `${kind}`,\n        \"properties\": {\n            \"endpoint\": `${baseUrl}`\n        }\n    };\n\n    var config = {\n    headers: { \n        \"Content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios.put(`${Endpoint}/datasources/${dataSourceName}?api-version=${api_version}`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction create_scan(access_token, Endpoint, kind, dataSourceName, scanName, api_version=\"2018-12-01-preview\") {\n    var data = {\n        \"kind\": `${kind}`\n    };\n\n    var config = {\n    headers: { \n        \"Content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios.put(`${Endpoint}/datasources/${dataSourceName}/scans/${scanName}?api-version=${api_version}`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction run_scan(access_token, Endpoint, dataSourceName, scanName, runId, scanLevel, api_version=\"2018-12-01-preview\") {\n    var data = {};\n\n    var config = {\n    headers: { \n        \"Content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios.put(`${Endpoint}/datasources/${dataSourceName}/scans/${scanName}/runs/${runId}?scanLevel=${scanLevel}&api-version=${api_version}`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction create_term_template(access_token, Endpoint, template_name, template_description, attribute_name, attribute_description) {\n    var data = {\n        \"termTemplateDefs\": [\n                {\n                    \"name\":`${template_name}`,\n                    \"description\":`${template_description}`,\n                    \"attributeDefs\":[\n                        {\n                        \"name\":`${attribute_name}`,\n                        \"description\":`${attribute_description}`,\n                        \"isOptional\":\"true\",\n                        \"typeName\":\"string\",\n                        \"options\":\n                            {\n                            \"isDisabled\":\"false\"\n                            }\n                        }\n                    ]\n                    }\n                ]\n            };\n\n    var config = {\n    headers: { \n        \"Content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios.post(`${Endpoint}/catalog/api/atlas/v2/types/typedefs`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction create_glossary_term(access_token, account_endpoint, template_name, term_name, glossary_guid, term_status=\"Draft\") {\n    var obj = {};\n    // obj[template_name] = {};  // Pass a term template name as argument in function call below, or comment this line for System Default term template.\n    \n    var data = {\n        \"name\":`${term_name}`,\n        \"anchor\": {\n            \"glossaryGuid\":`${glossary_guid}`\n            },\n        \"status\":`${term_status}`,\n        \"nickName\":`${term_name}`,\n        \n        \"attributes\": obj\n        };\n\n    var config = {\n    headers: { \n        \"Content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios.post(`${account_endpoint}/catalog/api/atlas/v2/glossary/term?includeTermHierarchy=true`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\n\n\nmodule.exports = async function (context, req) {\n    context.log(\"JavaScript HTTP trigger function processed a request.\");\n    \n    // ############################\n    // AZURE AD AUTHENTICATION\n    // ############################\n\n    // Setting up values to be used\n    const keyVaultName = \"', parameters('keyVaultName'), '\";\n    const KVUri = \"https://\" + keyVaultName + \".vault.azure.net\";\n    const tenant_id = \"', variables('tenantId'), '\"\n    const client_id = \"', parameters('aadAppClientId'), '\"\n    const resource_url = \"https://purview.azure.net/\"\n\n    // Setting up client for KeyVault\n    const credential = new DefaultAzureCredential();\n    const client = new SecretClient(KVUri, credential);\n\n    // Retrieving secret from KeyVault\n    const retrievedSecret = await client.getSecret(\"aadAppClientSecret\");\n    const client_secret=retrievedSecret.value;\n\n    // Retrieve access_token from AzureAuth function\n    const token = await azuread_auth(tenant_id, client_id, client_secret, resource_url);\n    const access_token = token.access_token;\n\n\n    // ##################\n    // CREATE DATA SOURCE\n    // ##################\n\n    // Setting up values to be used\n    const kind = \"AzureStorage\"\n    const storageBaseUrl = \"https://', parameters('storageAccountName'), '.blob.core.windows.net/\"      // Azure blob service url\n    const scan_endpoint = \"https://', parameters('purviewAccountName'), '.scan.purview.azure.com\"     // Azure Purview scan endpoint\n    const dataSourceName = \"DataSource-01\"                                      // Data Source name to be created\n\n    // Creating Data Source\n    const response_data_source = await create_data_source(access_token, scan_endpoint, kind, storageBaseUrl, dataSourceName);\n    console.log(response_data_source)\n\n    \n    // ###########\n    // CREATE SCAN\n    // ###########\n\n    // Setting up values to be used\n    const scan_kind = \"AzureStorageMsi\";\n    const scan_source_name = dataSourceName;\n    const scan_name = \"scan1\";\n\n    // Creating Scan\n    const response_scan_creation = await create_scan(access_token, scan_endpoint, scan_kind, scan_source_name, scan_name);\n    console.log(response_scan_creation)\n\n    \n    // ########\n    // RUN SCAN\n    // ########\n\n    // Setting up values to be used\n    const run_id = \"d55adc7d-3c3d-477a-9c6b-6d477381df52\";  // Open Powershell in Azure Cloud shell and run \"[guid]::NewGuid()\" to get a valid guid\n    const scan_level = \"Full\";                              // Possible options: Full, Incremental\n\n    // Running scan\n    const response_run_scan = await run_scan(access_token, scan_endpoint, scan_source_name, scan_name, run_id, scan_level);\n    console.log(response_run_scan)\n\n\n    // #############################\n    // CREATE GLOSSARY TERM TEMPLATE\n    // #############################\n\n    // Setting up values to be used\n    const account_endpoint = \"https://', parameters('purviewAccountName'), '.purview.azure.com\";\n    const template_name = \"purview_test_template\";                                   // This template name is used when creating glossary term\n    const template_description = \"A test template\";\n    const attribute_name = \"purview_test_attribute\";\n    const attribute_description = \"A test attribute\";\n\n    // Creating glossary term template\n    // const response_create_term_template = await create_term_template(access_token, account_endpoint, template_name, template_description, attribute_name, attribute_description);\n    // console.log(response_create_term_template)\n\n\n    // ####################\n    // CREATE GLOSSARY TERM\n    // ####################\n\n    // Setting up values to be used\n    const term_name = \"test_term_99\";\n    const glossary_guid = \"7379cbc4-b547-4a43-8383-2d537398468e\";\n    \n    // Creating glossary term\n    // const response_create_term = await create_glossary_term(access_token, account_endpoint, template_name, term_name, glossary_guid);\n    // console.log(response_create_term)\n\n\n    context.res = {\n        body: `AzurePurview Creation function triggered successfully..`\n    };\n}\n')]"
        }
      },
      "dependsOn": []
    },
    {
        "type": "Microsoft.Web/sites/functions",
        "apiVersion": "2020-06-01",
        "name": "[format('{0}/{1}', variables('functionAppName'), variables('functionName2'))]",
        "properties": {
          "config": {
              "bindings": [
                  {
                    "authLevel": "function",
                    "type": "httpTrigger",
                    "direction": "in",
                    "name": "req",
                    "methods": [
                      "get",
                      "post"
                    ]
                  },
                  {
                    "type": "http",
                    "direction": "out",
                    "name": "res"
                  }
                ]
          },
          "files": {
            "index.js": "[concat('var axios = require(\"axios\");\nvar qs = require(\"qs\");\n\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SecretClient } = require(\"@azure/keyvault-secrets\");\n\n\nfunction azuread_auth(tenant_id, client_id, client_secret, resource_url) {\n    var data = qs.stringify({\n        \"grant_type\": \"client_credentials\",\n        \"client_id\": `${client_id}`,\n        \"client_secret\": `${client_secret}`,\n        \"resource\": `${resource_url}` \n    });\n\n    var config = {\n    headers: { \n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n    };\n\n    return axios.post(`https://login.microsoftonline.com/${tenant_id}/oauth2/token`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction delete_data_source(access_token, Endpoint, dataSourceName, api_version=\"2018-12-01-preview\") {\n    var config = {\n    method: \"delete\",\n    url: `${Endpoint}/datasources/${dataSourceName}?api-version=${api_version}`,\n    headers: { \n        \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios(config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction delete_glossary_term(access_token, Endpoint, term_guid) {\n    var data = {};\n\n    var config = {\n    headers: { \n        \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios.delete(`${Endpoint}/catalog/api/atlas/v2/glossary/term/${term_guid}`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\n\n\nmodule.exports = async function (context, req) {\n    context.log(\"JavaScript HTTP trigger function processed a request.\");\n    \n    // ############################\n    // AZURE AD AUTHENTICATION\n    // ############################\n\n    // Setting up values to be used\n    const keyVaultName = \"', parameters('keyVaultName'), '\";\n    const KVUri = \"https://\" + keyVaultName + \".vault.azure.net\";\n    const tenant_id = \"', variables('tenantId'), '\"\n    const client_id = \"', parameters('aadAppClientId'), '\"\n    const resource_url = \"https://purview.azure.net/\"\n\n    // Setting up client for KeyVault\n    const credential = new DefaultAzureCredential();\n    const client = new SecretClient(KVUri, credential);\n\n    // Retrieving secret from KeyVault\n    const retrievedSecret = await client.getSecret(\"aadAppClientSecret\");\n    const client_secret=retrievedSecret.value;\n\n    // Retrieve access_token from AzureAuth function\n    const token = await azuread_auth(tenant_id, client_id, client_secret, resource_url);\n    const access_token = token.access_token;\n\n\n    // ##################\n    // DELETE DATA SOURCE\n    // ##################\n\n    // Setting up values to be used\n    const scan_endpoint = \"https://', parameters('purviewAccountName'), '.scan.purview.azure.com\"     // Azure Purview scan endpoint\n    const dataSourceName = \"DataSource-01\"                                      // Data Source name to be delete\n\n    // Deleting Data Source\n    const response_delete_source = await delete_data_source(access_token, scan_endpoint, dataSourceName);\n    console.log(response_delete_source)\n\n    \n    // ####################\n    // DELETE GLOSSARY TERM\n    // ####################\n\n    // Setting up values to be used\n    const account_endpoint = \"https://', parameters('purviewAccountName'), '.purview.azure.com\";\n    const term_guid = \"\";                                                       // Needs term guid to delete specific term\n\n    // Creating glossary term\n    // const response_create_term = await delete_glossary_term(access_token, account_endpoint, term_guid);\n    // console.log(response_create_term)\n\n    context.res = {\n        body: `AzurePurview Deletion function triggered successfully..`\n    };\n}\n')]"
          }
        },
        "dependsOn": []
      }
  ]
}